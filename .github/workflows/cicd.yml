name: CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_run:
    workflows: ["Dependabot Push Trigger"]
    types:
      - completed
  schedule:
    - cron: '0 2 * * 1'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  event-info:
    runs-on: ubuntu-latest
    steps:
    - name: Display event information
      run: |
        echo "GitHub Actions event information:"
        echo "Event Name: ${{ github.event_name }}"
        echo "Event Action: ${{ github.event.action }}"
        echo "Event Actor: ${{ github.actor }}"
        echo "Event Repository: ${{ github.repository }}"
        echo "Event Ref: ${{ github.ref }}"
        echo "Event SHA: ${{ github.sha }}"

  # Lint and Code Quality
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout (actions/checkout)
      uses: actions/checkout@v5

    - name: Set up Python (actions/setup-python)
      uses: actions/setup-python@v6
      with:
        python-version: '3.13'
        cache: 'pip'

    - name: Install pip dependencies
      run: |
        pip install -r requirements.txt
        pip install flake8 black bandit safety requests

    - name: Lint with flake8
      run: |
        # Stop the build if there are errors
        flake8 . --count  --show-source --statistics --max-line-length=160

    - name: Check formatting with black
      run: black --check --diff .

  # Unit Tests
  unit-test:
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13', '3.14']

    steps:
    - name: Checkout (actions/checkout)
      uses: actions/checkout@v5

    - name: Set up Python ${{ matrix.python-version }} (actions/setup-python)
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install pip dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-flask requests

    - name: Run tests with pytest
      run: pytest -v

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - name: Checkout (actions/checkout)
      uses: actions/checkout@v5

    - name: Set up Python (actions/setup-python)
      uses: actions/setup-python@v6
      with:
        python-version: '3.13'
        cache: 'pip'

    - name: Install pip dependencies
      run: |
        pip install -r requirements.txt
        pip install flake8 black bandit safety

    - name: Security scan with bandit
      run: bandit --skip B104 app.py

    - name: Security scan with safety
      run: safety check

  # Docker Build for Testing
  docker-build:
    runs-on: ubuntu-latest
    needs: [unit-test, security-scan]
    permissions:
      contents: read
      actions: write  # For Docker build cache
    steps:
    - name: Checkout (actions/checkout)
      uses: actions/checkout@v5

    - name: Set up Docker Buildx (docker/setup-buildx-action)
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (docker/build-push-action)
      uses: docker/build-push-action@v6
      with:
        load: true
        tags: ca-demo-api:build
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=${{ runner.temp }}/ca-demo-api.tar

    - name: Cache Docker Image (actions/upload-artifact)
      uses: actions/upload-artifact@v4
      with:
        # used build job hash as name to avoid overwriting previous builds
        name: ca-demo-api-${{ github.sha }}
        path: ${{ runner.temp }}/ca-demo-api.tar

  # API Testing
  api-test:
    runs-on: ubuntu-latest
    needs: docker-build
    permissions:
      contents: read
    steps:
    - name: Checkout (actions/checkout)
      uses: actions/checkout@v5

    - name: Set up Python (actions/setup-python)
      uses: actions/setup-python@v6
      with:
        python-version: '3.13'
        cache: 'pip'

    - name: Set up Docker Buildx (docker/setup-buildx-action)
      uses: docker/setup-buildx-action@v3

    - name: Download Cached Docker Image (actions/download-artifact)
      uses: actions/download-artifact@v5
      with:
        name: ca-demo-api-${{ github.sha }}
        path: ${{ runner.temp }}

    - name: Docker Load Image
      run: |
        docker load --input ${{ runner.temp }}/ca-demo-api.tar
        docker image ls -a

    - name: Install pip integration test dependencies
      run: |
        pip install requests

    - name: Run docker image for API tests
      run: |
        docker run -d --name api-test -p 5000:5000 ca-demo-api:build
        sleep 5

    - name: Test docker image with curl
      run: |
        # Test basic endpoint
        curl --connect-timeout 5 -f http://localhost:5000/ || exit 1

        # Test CA cert endpoint
        curl --connect-timeout 5 -f http://localhost:5000/api/ca_cert || exit 1

    - name: Run API integration tests with python
      run: |
        # Test basic auth endpoint
        python -c "
        import requests
        import base64
        import sys

        # Test basic auth
        auth = base64.b64encode(b'user:password').decode('ascii')
        headers = {'Authorization': f'Basic {auth}', 'Content-Type': 'application/json'}

        # Test CSR signing (mock CSR)
        csr_data = {
            'CSR': 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQ3BUQ0NBWTBDQVFBd0ZqRVVNQklHQTFVRUF4TUxaWGhoYlhCc1pTNWpiMjB3Z2dFaU1BMEdDU3FHU0liMwpEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURjVEhMd1dpSDVaNUlLM1JobUcxbk5YcnVFUk0zd1NGd3NoMGRoCk9lU2hDaVpVRTBKcWpmVllrR1UzMEV5ZHBXK2hTeEt1aE9jRHJWVEt5bzlGVE54b2E2ZWp2bE9iekl1MzlXZFUKQVJvSVQ1Y05OTFdmZ2p4eFVKNzcwMDVUU2E2VG1pbXpYUFpuZ0NMWjhCRUpGVnlYWjE2cUUrd0pYRUlLWVl5cQpZTzRLRjRnSE5NVjd4bHBUODdKSnJ6aEd6OWJsM2VvVy8xa1NkZE1oRHNlSzhhVEk0K2x3MisrVGNmelBDbkVnCjlvZGxqL09neHVrd21oaHJ2UTFSbENNR0tZcmNoWWJMaU11dlZZa29lalhKRlE3YlE3b1NYc2ovYWxzOG5sazkKRmU2QWtGTlltc2xpNXJHMkUyVGlMOUIxci9KeDNGbmMyRDNjRG9wSDJTSk5BWWd2QWdNQkFBR2dTakJJQmdrcQpoa2lHOXcwQkNRNHhPekE1TUNjR0ExVWRFUVFnTUI2Q0MyVjRZVzF3YkdVdVkyOXRnZzkzZDNjdVpYaGhiWEJzClpTNWpiMjB3RGdZRFZSMFBBUUgvQkFRREFnV2dNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUNvMzNUZStzMEQKS0NOT3FybVBYaGRNNFRxSGx5SklDeURHdXhqcEh4UW5SOUZocHA0SlZoWDI0WEpVT2NGMjZRcFN5NEdLbkVmdwpBa2pFNW1kV3IyL2dLRTU0M1pIc2tmcnhFSU1rSHBwOXRNOWZzWDlNWXo4Vm82RXhqTkxRbDh6bFhXZ1lBZllGCi9VZmRqY2RWRFZWZ0xGeEt0NE5pRHVlTHpETDR0Z0lYbUNienN1eHl2N2JPcWh0MTBKTzZQcGZLRVRJS0pzSnIKbnlFOUJxZXE3RHFKakptY0FObGkzay9wdmNmc2tjMHVmQ1VvdDhFVklURGlhYXNxakhkWFdKKzVCbXFxdFhYaQpZK09NNzlJdFFWak1aNHRPdmEvTlp0OUR2Y2hGYlJKY1JqRGthU0hjN01SU1VSbE5tT2VFT09QcmVDQTVjZHc0ClJWUXl1YjMyT0lEMAotLS0tLUVORCBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0K'
        }

        response = requests.post('http://localhost:5000/api/request_cert', json=csr_data, headers=headers)
        print(f'Basic auth test: {response.status_code}')
        if response.status_code not in [200, 201]:
            print(f'Basic auth test FAILED: Expected 200/201, got {response.status_code}')
            print(f'Response: {response.text}')
            sys.exit(1)

        # Test bearer token
        headers = {'Authorization': 'Bearer my-secret-token', 'Content-Type': 'application/json'}
        response = requests.post('http://localhost:5000/api/request_cert_bearer', json=csr_data, headers=headers)
        print(f'Bearer token test: {response.status_code}')
        if response.status_code not in [200, 201]:
            print(f'Bearer token test FAILED: Expected 200/201, got {response.status_code}')
            print(f'Response: {response.text}')
            sys.exit(1)

        print('All API integration tests passed!')
        "

    - name: Cleanup (stop container)
      run: docker stop api-test || true

  # Deploy (only on push to main or develop)
  deploy-ghcrio:
    runs-on: ubuntu-latest
    needs: api-test
    if: ${{ github.event_name == 'push' }} || ${{ github.event_name == 'workflow_run' }}
    permissions:
      contents: read
      packages: write
      actions: write  # For Docker build cache

    steps:
    - name: Checkout (actions/checkout)
      uses: actions/checkout@v5

    - name: Set up Docker Buildx (docker/setup-buildx-action)
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry (docker/login-action)
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (docker/metadata-action)
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value={{date 'YYYYMMDD-hhmmss' tz='CET'}}
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image (docker/build-push-action)
      uses: docker/build-push-action@v6
      with:
        push: true
        platforms: linux/amd64
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: false
